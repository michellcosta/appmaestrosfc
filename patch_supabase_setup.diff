diff --git a/.env.example b/.env.example
new file mode 100644
--- /dev/null
+++ b/.env.example
@@ -0,0 +1,11 @@
+# Supabase
+VITE_SUPABASE_URL=https://YOUR-PROJECT.supabase.co
+VITE_SUPABASE_ANON_KEY=YOUR-ANON-KEY
+# Somente em server-side / Edge (NÃO expor no front)
+SUPABASE_SERVICE_ROLE_KEY=YOUR-SERVICE-ROLE-KEY
+
+# Mercado Pago (server/Edge)
+MP_ACCESS_TOKEN=YOUR-MERCADO-PAGO-ACCESS-TOKEN
+
+# OneSignal (opcional/cliente)
+NEXT_PUBLIC_ONESIGNAL_APP_ID=
diff --git a/src/lib/supabase.ts b/src/lib/supabase.ts
new file mode 100644
--- /dev/null
+++ b/src/lib/supabase.ts
@@ -0,0 +1,21 @@
+// Supabase Client (Front)
+// Usa Vite env vars: VITE_SUPABASE_URL / VITE_SUPABASE_ANON_KEY
+import { createClient } from '@supabase/supabase-js';
+
+const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;
+const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;
+
+if (!supabaseUrl || !supabaseAnonKey) {
+  // Ajuda no diagnóstico em dev; em prod, mantenha silencioso se preferir
+  // eslint-disable-next-line no-console
+  console.warn('[Supabase] Missing VITE_SUPABASE_URL or VITE_SUPABASE_ANON_KEY');
+}
+
+export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
+  auth: {
+    persistSession: true,
+    autoRefreshToken: true,
+    detectSessionInUrl: true,
+  },
+});
+
diff --git a/supabase/migrations/0001_schema.sql b/supabase/migrations/0001_schema.sql
new file mode 100644
--- /dev/null
+++ b/supabase/migrations/0001_schema.sql
@@ -0,0 +1,355 @@
+-- SCHEMA: Maestros FC (Tabelas principais)
+-- Enum / checks básicos
+-- OBS: team_color suporta as 5 cores, incluindo 'Vermelho'
+
+create table if not exists app_settings_venue (
+  id text primary key default 'venue',
+  name text not null,
+  address text,
+  lat double precision not null,
+  lng double precision not null,
+  radius_m integer not null default 30,
+  updated_by uuid,
+  updated_at timestamptz not null default now()
+);
+
+create table if not exists users (
+  id uuid primary key default gen_random_uuid(),
+  auth_id uuid, -- supabase auth.users.id
+  name text not null,
+  email text,
+  role text check (role in ('owner','admin','aux','mensalista','diarista')) not null default 'diarista',
+  status text,
+  posicao text, -- 'Gol','Zaga','Lateral','Meio','Atacante','Coringa' (livre)
+  estrelas integer check (estrelas between 0 and 10) default 0,
+  tamanho_camisa text check (tamanho_camisa in ('G','GG')),
+  aprovado boolean default false,
+  created_at timestamptz not null default now(),
+  updated_at timestamptz not null default now()
+);
+
+create table if not exists matches (
+  id uuid primary key default gen_random_uuid(),
+  data_hora timestamptz not null,
+  max_jogadores integer not null,
+  status text check (status in ('draft','open','live','closed')) not null default 'draft',
+  gk_mode text check (gk_mode in ('two_fixed','one_fixed','by_team','auto')) not null default 'two_fixed',
+  notes text,
+  created_by uuid references users(id),
+  created_at timestamptz not null default now(),
+  updated_at timestamptz not null default now()
+);
+
+create table if not exists match_state (
+  match_id uuid primary key references matches(id) on delete cascade,
+  rev integer not null default 0,
+  status text check (status in ('idle','running','paused','ended')) not null default 'idle',
+  updated_at timestamptz not null default now()
+);
+
+create table if not exists checkins (
+  id uuid primary key default gen_random_uuid(),
+  match_id uuid not null references matches(id) on delete cascade,
+  user_id uuid not null references users(id) on delete cascade,
+  ts timestamptz not null default now(),
+  lat double precision,
+  lng double precision,
+  accuracy double precision,
+  mock_location boolean default false,
+  selfie_url text
+);
+create index if not exists idx_checkins_match on checkins(match_id);
+create index if not exists idx_checkins_user on checkins(user_id);
+
+create table if not exists team_draw (
+  match_id uuid primary key references matches(id) on delete cascade,
+  seed text,
+  criterios jsonb,
+  teams jsonb not null -- {Preto[],Verde[],Cinza[],Coletes[],Vermelho[]}
+);
+
+create table if not exists team_appearance (
+  id uuid primary key default gen_random_uuid(),
+  match_id uuid not null references matches(id) on delete cascade,
+  rodada integer not null,
+  user_id uuid not null references users(id) on delete cascade,
+  team_color text check (team_color in ('Preto','Verde','Cinza','Coletes','Vermelho')) not null,
+  role text check (role in ('GK','FIELD')) not null default 'FIELD',
+  enter_ts timestamptz not null default now(),
+  exit_ts timestamptz
+);
+create index if not exists idx_team_app_match on team_appearance(match_id);
+create index if not exists idx_team_app_user on team_appearance(user_id);
+
+create table if not exists events (
+  id uuid primary key default gen_random_uuid(),
+  match_id uuid not null references matches(id) on delete cascade,
+  rodada integer not null,
+  type text check (type in ('START','PAUSE','GOAL','SUB','END')) not null,
+  team_color text check (team_color in ('Preto','Verde','Cinza','Coletes','Vermelho')),
+  player_id uuid references users(id),
+  assist_id uuid references users(id),
+  server_ts timestamptz not null default now(),
+  client_ts timestamptz,
+  by_user_id uuid references users(id),
+  meta jsonb
+);
+create index if not exists idx_events_match on events(match_id);
+create index if not exists idx_events_round on events(match_id, rodada);
+
+create table if not exists tiebreaker_event (
+  id uuid primary key default gen_random_uuid(),
+  match_id uuid not null references matches(id) on delete cascade,
+  rodada integer not null,
+  method text check (method in ('coin','wheel')) not null,
+  result_team text check (result_team in ('Preto','Verde','Cinza','Coletes','Vermelho')) not null,
+  detail text,
+  ts timestamptz not null default now(),
+  by_user_id uuid references users(id)
+);
+create index if not exists idx_tie_match on tiebreaker_event(match_id);
+
+create table if not exists diarist_requests (
+  id uuid primary key default gen_random_uuid(),
+  match_id uuid not null references matches(id) on delete cascade,
+  user_id uuid not null references users(id) on delete cascade,
+  status text check (status in ('requested','accepted','payment_in_progress','paid','declined','full_blocked')) not null default 'requested',
+  accepted_by uuid references users(id),
+  accepted_at timestamptz,
+  payment_id uuid
+);
+create index if not exists idx_diarist_match on diarist_requests(match_id);
+create index if not exists idx_diarist_user on diarist_requests(user_id);
+
+create table if not exists payments (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid not null references users(id) on delete cascade,
+  tipo text check (tipo in ('mensal','diaria')) not null,
+  mes_ref text, -- MM/AAAA, quando mensal
+  match_id uuid references matches(id),
+  valor numeric not null,
+  status text check (status in ('pendente','confirmado','cancelado','revisar')) not null default 'pendente',
+  provider text default 'mercadopago',
+  reference_text text,
+  txid text,
+  charge_id text,
+  expires_at timestamptz,
+  created_at timestamptz not null default now()
+);
+create index if not exists idx_payments_user on payments(user_id);
+create index if not exists idx_payments_match on payments(match_id);
+
+create table if not exists credits (
+  id uuid primary key default gen_random_uuid(),
+  user_id uuid not null references users(id) on delete cascade,
+  origin_payment_id uuid references payments(id) on delete set null,
+  amount numeric not null,
+  consumed boolean not null default false,
+  created_at timestamptz not null default now()
+);
+create index if not exists idx_credits_user on credits(user_id);
+
+create table if not exists notice (
+  id uuid primary key default gen_random_uuid(),
+  titulo text not null,
+  corpo text,
+  anexos jsonb,
+  fixado boolean not null default false,
+  critico boolean not null default false,
+  expiracao timestamptz,
+  created_by uuid references users(id),
+  created_at timestamptz not null default now()
+);
+
+create table if not exists notification_templates (
+  id uuid primary key default gen_random_uuid(),
+  scope text check (scope in ('mensal','diaria')) not null,
+  "when" text check ("when" in ('pre','due','post','paid')) not null,
+  canal text check (canal in ('push','inapp','both')) not null default 'inapp',
+  template_text text not null,
+  version integer not null default 1,
+  updated_by uuid references users(id),
+  updated_at timestamptz not null default now()
+);
+
+create table if not exists invites (
+  id uuid primary key default gen_random_uuid(),
+  code text unique not null,
+  role text check (role in ('mensalista','aux','admin')) not null,
+  created_by uuid references users(id),
+  used_by uuid references users(id),
+  expires_at timestamptz,
+  used_at timestamptz
+);
+
+create table if not exists audit_log (
+  id uuid primary key default gen_random_uuid(),
+  action text not null,
+  by_user_id uuid references users(id),
+  before jsonb,
+  after jsonb,
+  ts timestamptz not null default now()
+);
+
diff --git a/supabase/migrations/0002_policies.sql b/supabase/migrations/0002_policies.sql
new file mode 100644
--- /dev/null
+++ b/supabase/migrations/0002_policies.sql
@@ -0,0 +1,160 @@
+-- RLS / Policies
+alter table app_settings_venue enable row level security;
+alter table users enable row level security;
+alter table matches enable row level security;
+alter table match_state enable row level security;
+alter table checkins enable row level security;
+alter table team_draw enable row level security;
+alter table team_appearance enable row level security;
+alter table events enable row level security;
+alter table tiebreaker_event enable row level security;
+alter table diarist_requests enable row level security;
+alter table payments enable row level security;
+alter table credits enable row level security;
+alter table notice enable row level security;
+alter table notification_templates enable row level security;
+alter table invites enable row level security;
+alter table audit_log enable row level security;
+
+-- Leitura autenticada ampla
+create policy "read_all_authenticated_app"
+on app_settings_venue for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_users"
+on users for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_matches"
+on matches for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_match_state"
+on match_state for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_checkins"
+on checkins for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_team_draw"
+on team_draw for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_team_appearance"
+on team_appearance for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_events"
+on events for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_tiebreaker"
+on tiebreaker_event for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_diarist_requests"
+on diarist_requests for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_payments"
+on payments for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_credits"
+on credits for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_notice"
+on notice for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_templates"
+on notification_templates for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_invites"
+on invites for select
+to authenticated
+using (true);
+
+create policy "read_all_authenticated_audit_log"
+on audit_log for select
+to authenticated
+using (true);
+
+-- Escrita sensível: payments/credits/audit_log somente via Service Role (desabilita por padrão)
+-- As funções Edge com SERVICE_ROLE_KEY executarão sem restrições via rpc/ or server-side.
+revoke all on table payments from authenticated;
+revoke all on table credits from authenticated;
+revoke all on table audit_log from authenticated;
+
+-- app_settings_venue: somente Owner pode editar (restrição será validada nas functions)
+-- users.estrelas: editar somente Owner (via function/Service Role); invisível: o front não deve exibir para jogadores
+-- invites: CRUD Owner/Admin (via function)
+
+-- Exemplos de policies de INSERT/UPDATE “brandas” para entidades não sensíveis
+create policy "insert_checkins_authenticated"
+on checkins for insert
+to authenticated
+with check (auth.uid() is not null);
+
+create policy "insert_events_authenticated"
+on events for insert
+to authenticated
+with check (auth.uid() is not null);
+
+create policy "insert_team_appearance_authenticated"
+on team_appearance for insert
+to authenticated
+with check (auth.uid() is not null);
+
+create policy "insert_tiebreaker_authenticated"
+on tiebreaker_event for insert
+to authenticated
+with check (auth.uid() is not null);
+
+-- Atualizações simples (vão ser mediadas por Edge Functions para lógica sensível)
+create policy "update_match_state_authenticated"
+on match_state for update
+to authenticated
+using (auth.uid() is not null)
+with check (auth.uid() is not null);
+
diff --git a/supabase/seed.sql b/supabase/seed.sql
new file mode 100644
--- /dev/null
+++ b/supabase/seed.sql
@@ -0,0 +1,44 @@
+-- Seed básico: 1 venue, 1 jogo futuro, 2-3 usuários exemplo
+
+insert into app_settings_venue (id, name, address, lat, lng, radius_m, updated_by)
+values ('venue', 'Campo do Maestros', 'Rua das Flores, 123', -22.826, -43.053, 30, null)
+on conflict (id) do update set name=excluded.name;
+
+-- usuários exemplo
+insert into users (name, email, role, posicao, estrelas, tamanho_camisa, aprovado)
+values 
+('Owner Maestros', 'owner@maestrosfc.test', 'owner', 'Gol', 8, 'G', true),
+('Admin Sec', 'admin@maestrosfc.test', 'admin', 'Meio', 7, 'GG', true),
+('Mensalista X', 'mensal@maestrosfc.test', 'mensalista', 'Atacante', 6, 'G', true)
+on conflict do nothing;
+
+-- jogo futuro
+insert into matches (data_hora, max_jogadores, status, gk_mode, notes, created_by)
+select now() + interval '2 days', 24, 'open', 'two_fixed', 'Jogo padrão (seed)', u.id
+from users u
+where u.role='owner'
+limit 1;
+
+-- estado inicial do match
+insert into match_state (match_id, rev, status)
+select m.id, 0, 'idle'
+from matches m
+where not exists (select 1 from match_state ms where ms.match_id=m.id)
+limit 1;
