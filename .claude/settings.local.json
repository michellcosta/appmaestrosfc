{
  "permissions": {
    "allow": [
      "Bash(rm:*)",
      "Bash(mv:*)",
      "Bash(rmdir:*)",
      "Bash(npm run build:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(npm run type-check:*)",
      "Bash(git checkout:*)",
      "Bash(git push:*)",
      "Bash(gh pr create -B main -t \"feat: Integrar sorteio de times com jogadores cadastrados e criar partidas\" -b \"$(cat <<''EOF''\n## 🎯 Objetivo\n\nIntegrar jogadores cadastrados em **Gerenciar jogadores** ao sistema de **Sortear times** e criar **Partidas** persistidas no Supabase com lançamento de gols.\n\n---\n\n## ✅ Mudanças Implementadas\n\n### 1. **Esquema de Banco de Dados (Supabase)**\n\n- Criada migration `20250105_matches_teams_goals.sql` com:\n  - **`matches`**: Partidas criadas a partir do sorteio\n  - **`teams`**: Times por partida (Preto, Verde, Cinza, Vermelho)\n  - **`match_players`**: Jogadores alocados em times\n  - **`goals`**: Gols marcados durante as partidas\n- RLS habilitado com políticas para usuários autenticados\n- Views e índices para otimização de queries\n\n### 2. **Helpers de Banco (`src/lib/db.ts`)**\n\nFunções tipadas para operações no Supabase:\n\n- **`getPlayersByGroup()`**: Buscar jogadores cadastrados por grupo\n- **`createMatchWithTeams()`**: Criar partida com times e distribuir jogadores\n- **`getMatchWithTeams()`**: Buscar partida completa com times e jogadores\n- **`addGoal()`**: Adicionar gol na partida\n- **`getMatchStats()`**: Buscar estatísticas (placar e gols)\n\n### 3. **Hook Adaptado (`src/hooks/useTeamDrawSupabase.ts`)**\n\n- Persistência no Supabase ao sortear times\n- Fallback para localStorage se Supabase falhar\n- Integração com `usePlayers()` para jogadores aprovados\n- Distribuição de jogadores em times com embaralhamento\n\n---\n\n## 📦 Arquivos Modificados\n\n- **`src/hooks/useTeamDrawSupabase.ts`**: Adicionada persistência Supabase\n- **`src/lib/db.ts`**: Novo arquivo com helpers tipados\n- **`supabase/migrations/20250105_matches_teams_goals.sql`**: Nova migration SQL\n- **Build**: Compilação OK (vite build ✅)\n\n---\n\n## 🔧 Funcionalidades\n\n- ✅ Jogadores de \"Gerenciar jogadores\" aparecem em \"Sortear times\"\n- ✅ Seleção de presentes, definição de n times e sorteio\n- ✅ Confirmação cria Partida com times e elencos no Supabase\n- ✅ Página de partida permite lançar gols (já existente)\n- ✅ Build sem erros TypeScript\n\n---\n\n## 🚀 Próximos Passos para Deploy\n\n### 1. **Aplicar Migration no Supabase**\n\nExecute a migration via CLI ou Dashboard do Supabase:\n\n```bash\nnpx supabase migration up\n```\n\nOu copie e execute o conteúdo de `supabase/migrations/20250105_matches_teams_goals.sql` no Dashboard do Supabase.\n\n### 2. **Configurar Variáveis de Ambiente na Vercel**\n\nCertifique-se de que as seguintes variáveis estão configuradas no Vercel:\n\n- `VITE_SUPABASE_URL`\n- `VITE_SUPABASE_ANON_KEY`\n\n---\n\n## 🧪 Testes Manuais\n\n### Checklist de Testes\n\n1. **Gerenciar Jogadores**: Confirmar que há jogadores ativos cadastrados\n2. **Sortear Times**: Ir em \"Sortear times\", selecionar presentes, escolher n times, sortear e confirmar\n3. **Partida**: Acessar `/partida/[id]`, registrar 2-3 gols e verificar placar\n4. **Persistência**: Recarregar a página para validar que os dados foram salvos no Supabase\n\n---\n\n## 📝 Notas Técnicas\n\n- **Arquitetura**: Vite + React (não Next.js)\n- **Database**: Supabase com RLS habilitado\n- **Fallback**: LocalStorage usado caso Supabase falhe\n- **Compatibilidade**: Mantém funcionalidades existentes intactas\n\n---\n\n## 🤖 Gerado com\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}