import{c as t,p as i,a}from"./gamesStore-xBIIlxm6.js";import"./vendor-react-BSMgdr9Q.js";const e=t()(i((t,i)=>({notifications:[],addNotification:i=>{const a={...i,id:`notification_${Date.now()}_${Math.random().toString(36).substr(2,9)}`,createdAt:new Date,read:!1};t(t=>({notifications:[a,...t.notifications]}))},markAsRead:i=>{t(t=>({notifications:t.notifications.map(t=>t.id===i?{...t,read:!0}:t)}))},markAllAsRead:()=>{t(t=>({notifications:t.notifications.map(t=>({...t,read:!0}))}))},removeNotification:i=>{t(t=>({notifications:t.notifications.filter(t=>t.id!==i)}))},clearAll:()=>{t({notifications:[]})},getUnreadCount:()=>i().notifications.filter(t=>!t.read).length,getNotificationsForUser:t=>i().notifications.filter(i=>i.targetRoles.includes(t)),getUnreadNotificationsForUser:t=>i().notifications.filter(i=>i.targetRoles.includes(t)&&!i.read),createDiaristRequestNotification:(t,a,e)=>{const{addNotification:r}=i();r({type:"diarist_request",title:"Nova Solicitação de Diarista",message:`${a.name} solicitou participação na partida de ${e}`,matchId:t,requesterId:a.id,requesterName:a.name,targetRoles:["owner","admin","aux"]})}}),{name:"notifications-storage",version:1})),r=t()(i((t,i)=>({participants:[],diaristRequests:[],loading:!1,error:null,confirmParticipation:async(i,a)=>{t({loading:!0,error:null});try{const e={id:`${i}-${a.id}-${Date.now()}`,matchId:i,userId:a.id,userRole:a.role,status:"confirmed",confirmedAt:new Date,user:a};t(t=>({participants:[...t.participants.filter(t=>!(t.matchId===i&&t.userId===a.id)),e],loading:!1}))}catch(e){t({error:"Erro ao confirmar participação",loading:!1})}},cancelParticipation:async(i,a)=>{t({loading:!0,error:null});try{t(t=>({participants:t.participants.filter(t=>!(t.matchId===i&&t.userId===a)),loading:!1}))}catch(e){t({error:"Erro ao cancelar participação",loading:!1})}},requestToPlay:async(a,r)=>{t({loading:!0,error:null});try{if(i().diaristRequests.find(t=>t.matchId===a&&t.userId===r.id))throw new Error("Solicitação já existe para esta partida");const s={id:`req-${a}-${r.id}-${Date.now()}`,matchId:a,userId:r.id,status:"pending",requestedAt:new Date,user:r};t(t=>({diaristRequests:[...t.diaristRequests.filter(t=>!(t.matchId===a&&t.userId===r.id)),s],loading:!1}));const o=e.getState(),n=(new Date).toLocaleDateString("pt-BR");o.createDiaristRequestNotification(a,r,n)}catch(s){t({error:"Erro ao solicitar participação",loading:!1})}},cancelRequest:async(i,a)=>{t({loading:!0,error:null});try{t(t=>({diaristRequests:t.diaristRequests.filter(t=>!(t.matchId===i&&t.userId===a)),loading:!1}))}catch(e){t({error:"Erro ao cancelar solicitação",loading:!1})}},approveRequest:async(a,e)=>{t({loading:!0,error:null});try{const r=i().diaristRequests.find(t=>t.id===a);if(!r)throw new Error("Solicitação não encontrada");t(t=>({diaristRequests:t.diaristRequests.map(t=>t.id===a?{...t,status:"approved",reviewedAt:new Date,reviewedBy:e}:t),loading:!1}));const s={id:`${r.matchId}-${r.userId}-${Date.now()}`,matchId:r.matchId,userId:r.userId,userRole:"diarista",status:"waiting_list",confirmedAt:new Date,user:r.user};t(t=>({participants:[...t.participants,s]}))}catch(r){t({error:"Erro ao aprovar solicitação",loading:!1})}},rejectRequest:async(i,a,e)=>{t({loading:!0,error:null});try{t(t=>({diaristRequests:t.diaristRequests.map(t=>t.id===i?{...t,status:"rejected",reviewedAt:new Date,reviewedBy:a,notes:e}:t),loading:!1}))}catch(r){t({error:"Erro ao rejeitar solicitação",loading:!1})}},getParticipantsByMatch:t=>i().participants.filter(i=>i.matchId===t),getConfirmedParticipants:t=>i().participants.filter(i=>i.matchId===t&&"confirmed"===i.status),getWaitingListParticipants:t=>i().participants.filter(i=>i.matchId===t&&"waiting_list"===i.status),getPendingRequests:t=>i().diaristRequests.filter(i=>i.matchId===t&&"pending"===i.status),getAllPendingRequests:()=>i().diaristRequests.filter(t=>"pending"===t.status),getUserParticipation:(t,a)=>i().participants.find(i=>i.matchId===t&&i.userId===a)||null,getUserRequest:(t,a)=>i().diaristRequests.find(i=>i.matchId===t&&i.userId===a)||null,hasUserConfirmed:(t,a)=>i().participants.some(i=>i.matchId===t&&i.userId===a&&"confirmed"===i.status),hasUserRequested:(t,a)=>i().diaristRequests.some(i=>i.matchId===t&&i.userId===a&&"pending"===i.status),canUserConfirm:(t,a,e)=>{const r=i().getConfirmedParticipants(t).length;return"mensalista"===a.role||"diarista"===a.role&&r<e},reset:()=>{t({participants:[],diaristRequests:[],loading:!1,error:null})},loadExampleData:()=>{}}),{name:"match-participants-store",storage:a(()=>localStorage),partialize:t=>({participants:t.participants,diaristRequests:t.diaristRequests})}));export{r as useMatchParticipantsStore};
