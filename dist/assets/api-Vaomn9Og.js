import{c as a}from"./compare_utf8-C9SUdxOE.js";var e=Object.defineProperty,t=(a,t,s)=>((a,t,s)=>t in a?e(a,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[t]=s)(a,"symbol"!=typeof t?t+"":t,s);class s{constructor({isOptional:a}){t(this,"type"),t(this,"fieldPaths"),t(this,"isOptional"),t(this,"isConvexValidator"),this.isOptional=a,this.isConvexValidator=!0}get optional(){return"optional"===this.isOptional}}class i extends s{constructor({isOptional:a,tableName:e}){if(super({isOptional:a}),t(this,"tableName"),t(this,"kind","id"),"string"!=typeof e)throw new Error("v.id(tableName) requires a string");this.tableName=e}get json(){return{type:"id",tableName:this.tableName}}asOptional(){return new i({isOptional:"optional",tableName:this.tableName})}}class r extends s{constructor(){super(...arguments),t(this,"kind","float64")}get json(){return{type:"number"}}asOptional(){return new r({isOptional:"optional"})}}class n extends s{constructor(){super(...arguments),t(this,"kind","string")}get json(){return{type:this.kind}}asOptional(){return new n({isOptional:"optional"})}}class l extends s{constructor({isOptional:a,element:e}){super({isOptional:a}),t(this,"element"),t(this,"kind","array"),this.element=e}get json(){return{type:this.kind,value:this.element.json}}asOptional(){return new l({isOptional:"optional",element:this.element})}}const d=a=>new i({isOptional:"required",tableName:a}),o=()=>new r({isOptional:"required"}),c=()=>new n({isOptional:"required"}),m=a=>new l({isOptional:"required",element:a}),p=a=>a.asOptional(),y={players:{add:{args:{name:c(),email:p(c()),position:p(c()),userId:c()},handler:async(a,{name:e,email:t,position:s,userId:i})=>{const r=await a.db.insert("players",{name:e,email:t,position:s,created_by:i,created_at:Date.now(),active:!0});return await a.db.insert("playerStats",{player_id:r,goals:0,assists:0,matches_played:0,updated_at:Date.now()}),r}},listActive:{args:{},handler:async a=>await a.db.query("players").withIndex("by_active",a=>a.eq("active",!0)).collect()},get:{args:{id:d("players")},handler:async(a,{id:e})=>await a.db.get(e)},update:{args:{id:d("players"),name:p(c()),email:p(c()),position:p(c())},handler:async(a,{id:e,name:t,email:s,position:i})=>{const r={};return void 0!==t&&(r.name=t),void 0!==s&&(r.email=s),void 0!==i&&(r.position=i),await a.db.patch(e,r)}},deactivate:{args:{id:d("players")},handler:async(a,{id:e})=>await a.db.patch(e,{active:!1})},getStats:{args:{playerId:d("players")},handler:async(a,{playerId:e})=>await a.db.query("playerStats").withIndex("by_player",a=>a.eq("player_id",e)).first()},getRanking:{args:{limit:p(o())},handler:async(a,{limit:e=10})=>{const t=await a.db.query("playerStats").withIndex("by_goals",a=>a.gt("goals",0)).collect();return(await Promise.all(t.map(async e=>{const t=await a.db.get(e.player_id);return{...e,player_name:t?.name||"Jogador",player_email:t?.email}}))).sort((a,e)=>e.goals-a.goals||e.assists-a.assists).slice(0,e)}}},matches:{create:{args:{title:c(),date:o(),userId:c()},handler:async(a,{title:e,date:t,userId:s})=>await a.db.insert("matches",{title:e,date:t,status:"pending",created_by:s,created_at:Date.now()})},drawTeams:{args:{matchId:d("matches"),playerIds:m(d("players"))},handler:async(a,{matchId:e,playerIds:t})=>{const s=[...t].sort(()=>Math.random()-.5),i=Math.ceil(s.length/2),r=s.slice(0,i),n=s.slice(i);for(const l of r)await a.db.insert("matchPlayers",{match_id:e,player_id:l,team:"A"});for(const l of n)await a.db.insert("matchPlayers",{match_id:e,player_id:l,team:"B"});return{teamA:r,teamB:n}}},start:{args:{matchId:d("matches")},handler:async(a,{matchId:e})=>await a.db.patch(e,{status:"live",started_at:Date.now()})},end:{args:{matchId:d("matches")},handler:async(a,{matchId:e})=>await a.db.patch(e,{status:"ended",ended_at:Date.now()})},get:{args:{matchId:d("matches")},handler:async(a,{matchId:e})=>await a.db.get(e)},list:{args:{status:p(c())},handler:async(a,{status:e})=>e?await a.db.query("matches").withIndex("by_status",a=>a.eq("status",e)).collect():await a.db.query("matches").collect()},getLiveView:{args:{matchId:d("matches")},handler:async(a,{matchId:e})=>{const t=await a.db.get(e);if(!t)return null;const s=await a.db.query("matchPlayers").withIndex("by_match",a=>a.eq("match_id",e)).collect(),i=await Promise.all(s.map(async e=>{const t=await a.db.get(e.player_id);return{...e,player_name:t?.name||"Jogador",player_email:t?.email}})),r=await a.db.query("matchEvents").withIndex("by_match",a=>a.eq("match_id",e)).collect(),n=r.reduce((a,e)=>("goal"===e.type&&(a[e.team]=(a[e.team]||0)+1),a),{});return{match:t,players:i,events:r,scoreA:n.A||0,scoreB:n.B||0}}}},events:{addGoal:{args:{matchId:d("matches"),playerId:d("players"),team:c(),minute:o(),userId:c()},handler:async(a,{matchId:e,playerId:t,team:s,minute:i,userId:r})=>{await a.db.insert("matchEvents",{match_id:e,type:"goal",player_id:t,team:s,minute:i,created_at:Date.now()});const n=await a.db.query("playerStats").withIndex("by_player",a=>a.eq("player_id",t)).first();n&&await a.db.patch(n._id,{goals:n.goals+1,updated_at:Date.now()})}},addAssist:{args:{matchId:d("matches"),playerId:d("players"),team:c(),minute:o(),userId:c()},handler:async(a,{matchId:e,playerId:t,team:s,minute:i,userId:r})=>{await a.db.insert("matchEvents",{match_id:e,type:"assist",player_id:t,team:s,minute:i,created_at:Date.now()});const n=await a.db.query("playerStats").withIndex("by_player",a=>a.eq("player_id",t)).first();n&&await a.db.patch(n._id,{assists:n.assists+1,updated_at:Date.now()})}},getMatchEvents:{args:{matchId:d("matches")},handler:async(a,{matchId:e})=>{const t=await a.db.query("matchEvents").withIndex("by_match",a=>a.eq("match_id",e)).collect();return(await Promise.all(t.map(async e=>{const t=await a.db.get(e.player_id);return{...e,player_name:t?.name||"Jogador"}}))).sort((a,e)=>a.minute-e.minute)}},getRanking:{args:{limit:p(o())},handler:async(a,{limit:e=10})=>{const t=await a.db.query("playerStats").collect();return(await Promise.all(t.map(async e=>{const t=await a.db.get(e.player_id);return{...e,player_name:t?.name||"Jogador",player_email:t?.email}}))).sort((a,e)=>e.goals-a.goals||e.assists-a.assists).slice(0,e)}}},invites:{create:{args:{email:c(),role:c(),userId:c()},handler:async(a,{email:e,role:t,userId:s})=>{if(await a.db.query("invites").withIndex("by_email",a=>a.eq("email",e)).filter(a=>a.eq(a.field("status"),"pending")).first())throw new Error("Já existe um convite pendente para este email");const i=Date.now()+6048e5;return await a.db.insert("invites",{email:e,role:t,status:"pending",created_by:s,created_at:Date.now(),expires_at:i})}},accept:{args:{inviteId:d("invites"),userId:c(),fullName:c()},handler:async(a,{inviteId:e,userId:t,fullName:s})=>{const i=await a.db.get(e);if(!i)throw new Error("Convite não encontrado");if("pending"!==i.status)throw new Error("Convite já foi processado");if(Date.now()>i.expires_at)throw new Error("Convite expirado");return await a.db.patch(e,{status:"accepted"}),await a.db.insert("profiles",{email:i.email,full_name:s,role:i.role,created_at:Date.now(),updated_at:Date.now(),active:!0})}},decline:{args:{inviteId:d("invites")},handler:async(a,{inviteId:e})=>await a.db.patch(e,{status:"declined"})},list:{args:{status:p(c()),createdBy:p(c())},handler:async(a,{status:e,createdBy:t})=>{let s=a.db.query("invites");return e&&(s=s.withIndex("by_status",a=>a.eq("status",e))),t&&(s=s.withIndex("by_created_by",a=>a.eq("created_by",t))),await s.collect()}},get:{args:{inviteId:d("invites")},handler:async(a,{inviteId:e})=>await a.db.get(e)},cleanExpired:{args:{},handler:async a=>{const e=Date.now(),t=await a.db.query("invites").filter(a=>a.lt(a.field("expires_at"),e)).collect();for(const s of t)await a.db.patch(s._id,{status:"expired"});return t.length}}}};export{y as api};
