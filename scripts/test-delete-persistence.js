/**
 * Script de Teste de Persist√™ncia do Delete
 * Verifica se o delete realmente remove os dados do banco
 */

import { createClient } from '@supabase/supabase-js';

console.log('üß™ TESTANDO PERSIST√äNCIA DO DELETE...\n');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://autxxmhtadimwvprfsov.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1dHh4bWh0YWRpbXd2cHJmc292Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2MDQ1NDcsImV4cCI6MjA3MjE4MDU0N30.LwjIbMib_pPKpiXAZ3bu1tSVyTjhDzLPI6E59NdG3Ig';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testDeletePersistence() {
  try {
    console.log('1Ô∏è‚É£ VERIFICANDO DADOS ANTES DO DELETE...');
    console.log('========================================');
    
    // Buscar jogadores antes do delete
    const { data: playersBefore, error: beforeError } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (beforeError) {
      console.log('‚ùå Erro ao buscar jogadores:', beforeError.message);
      return;
    }
    
    console.log(`‚úÖ Encontrados ${playersBefore.length} jogadores antes do delete`);
    
    if (playersBefore.length === 0) {
      console.log('‚ö†Ô∏è Nenhum jogador encontrado para testar');
      return;
    }
    
    // Pegar o primeiro jogador para teste
    const testPlayer = playersBefore[0];
    console.log(`üîç Testando com jogador: ${testPlayer.name} (${testPlayer.user_id})`);
    
    console.log('\n2Ô∏è‚É£ EXECUTANDO DELETE...');
    console.log('========================');
    
    // Deletar o jogador
    const { data: deleteResult, error: deleteError } = await supabase
      .from('player_profiles')
      .delete()
      .eq('user_id', testPlayer.user_id)
      .select('*');
    
    if (deleteError) {
      console.log('‚ùå Erro no delete:', deleteError.message);
      return;
    }
    
    console.log('‚úÖ Delete executado com sucesso!');
    console.log('üìä Registros deletados:', deleteResult?.length || 0);
    
    console.log('\n3Ô∏è‚É£ VERIFICANDO DADOS AP√ìS DELETE...');
    console.log('===================================');
    
    // Buscar jogadores ap√≥s o delete
    const { data: playersAfter, error: afterError } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (afterError) {
      console.log('‚ùå Erro ao buscar jogadores ap√≥s delete:', afterError.message);
      return;
    }
    
    console.log(`‚úÖ Encontrados ${playersAfter.length} jogadores ap√≥s delete`);
    
    // Verificar se o jogador foi realmente removido
    const playerStillExists = playersAfter.some(p => p.user_id === testPlayer.user_id);
    
    if (playerStillExists) {
      console.log('‚ùå PROBLEMA: Jogador ainda existe ap√≥s delete!');
      console.log('üí° Poss√≠veis causas:');
      console.log('   - RLS policy est√° filtrando o delete');
      console.log('   - Delete n√£o foi executado corretamente');
      console.log('   - Dados est√£o sendo restaurados por trigger');
    } else {
      console.log('‚úÖ SUCESSO: Jogador foi removido do banco!');
    }
    
    console.log('\n4Ô∏è‚É£ VERIFICANDO FUN√á√ÉO RPC...');
    console.log('============================');
    
    // Verificar se a fun√ß√£o RPC ainda retorna o jogador
    const { data: rpcResult, error: rpcError } = await supabase.rpc('get_all_memberships');
    
    if (rpcError) {
      console.log('‚ùå Erro na fun√ß√£o RPC:', rpcError.message);
    } else {
      console.log(`‚úÖ Fun√ß√£o RPC retornou ${rpcResult?.length || 0} jogadores`);
      
      const playerInRpc = rpcResult?.some(p => p.id === testPlayer.user_id);
      
      if (playerInRpc) {
        console.log('‚ùå PROBLEMA: Fun√ß√£o RPC ainda retorna o jogador deletado!');
        console.log('üí° CAUSA: Fun√ß√£o RPC pode estar fazendo join com tabela diferente');
      } else {
        console.log('‚úÖ SUCESSO: Fun√ß√£o RPC n√£o retorna o jogador deletado!');
      }
    }
    
    console.log('\n5Ô∏è‚É£ DIAGN√ìSTICO FINAL...');
    console.log('========================');
    
    if (playerStillExists) {
      console.log('‚ùå PROBLEMA CONFIRMADO: Delete n√£o persiste no banco');
      console.log('üí° SOLU√á√ÉO: Verificar RLS policies ou triggers');
    } else if (playerInRpc) {
      console.log('‚ùå PROBLEMA: Fun√ß√£o RPC retorna dados antigos');
      console.log('üí° SOLU√á√ÉO: Verificar l√≥gica da fun√ß√£o RPC');
    } else {
      console.log('‚úÖ DELETE FUNCIONANDO PERFEITAMENTE!');
      console.log('üí° PROBLEMA: Pode estar na l√≥gica de reload do frontend');
    }
    
    console.log('\nüîß PR√ìXIMOS PASSOS:');
    console.log('===================');
    console.log('1. Verificar se o delete persiste no banco');
    console.log('2. Verificar se a fun√ß√£o RPC retorna dados corretos');
    console.log('3. Verificar se o frontend est√° fazendo reload desnecess√°rio');
    console.log('4. Implementar cache local mais inteligente');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar teste
testDeletePersistence();



