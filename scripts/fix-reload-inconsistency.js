/**
 * Script para Corrigir Inconsist√™ncia de Reload
 * Corrige o problema de inconsist√™ncia entre banco e RPC
 */

import { createClient } from '@supabase/supabase-js';

console.log('üîß CORRIGINDO INCONSIST√äNCIA DE RELOAD...\n');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://autxxmhtadimwvprfsov.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1dHh4bWh0YWRpbXd2cHJmc292Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2MDQ1NDcsImV4cCI6MjA3MjE4MDU0N30.LwjIbMib_pPKpiXAZ3bu1tSVyTjhDzLPI6E59NdG3Ig';

const supabase = createClient(supabaseUrl, supabaseKey);

async function fixReloadInconsistency() {
  try {
    console.log('1Ô∏è‚É£ VERIFICANDO INCONSIST√äNCIA...');
    console.log('=================================');
    
    // Verificar banco direto
    const { data: dbPlayers, error: dbError } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (dbError) {
      console.log('‚ùå Erro ao buscar no banco:', dbError.message);
      return;
    }
    
    console.log(`‚úÖ Banco direto: ${dbPlayers.length} jogadores aprovados`);
    
    // Verificar fun√ß√£o RPC
    const { data: rpcPlayers, error: rpcError } = await supabase.rpc('get_all_memberships');
    
    if (rpcError) {
      console.log('‚ùå Erro na fun√ß√£o RPC:', rpcError.message);
      return;
    }
    
    console.log(`‚úÖ Fun√ß√£o RPC: ${rpcPlayers?.length || 0} jogadores`);
    
    if (dbPlayers.length !== rpcPlayers?.length) {
      console.log('‚ùå INCONSIST√äNCIA CONFIRMADA!');
      console.log(`   Banco: ${dbPlayers.length} vs RPC: ${rpcPlayers?.length}`);
    } else {
      console.log('‚úÖ Banco e RPC est√£o sincronizados');
      return;
    }
    
    console.log('\n2Ô∏è‚É£ CORRIGINDO INCONSIST√äNCIA...');
    console.log('================================');
    
    // Identificar jogadores que n√£o deveriam aparecer na RPC
    const dbPlayerIds = dbPlayers.map(p => p.user_id);
    const rpcPlayerIds = rpcPlayers?.map(p => p.id) || [];
    
    const extraPlayers = rpcPlayerIds.filter(id => !dbPlayerIds.includes(id));
    console.log(`üîç Jogadores extras na RPC: ${extraPlayers.length}`);
    
    if (extraPlayers.length > 0) {
      console.log('üß™ Marcando jogadores extras como n√£o aprovados...');
      
      for (const playerId of extraPlayers) {
        const { data: updateData, error: updateError } = await supabase
          .from('player_profiles')
          .update({ approved: false })
          .eq('user_id', playerId)
          .select('*');
        
        if (updateError) {
          console.log(`‚ùå Erro ao atualizar jogador ${playerId}:`, updateError.message);
        } else {
          console.log(`‚úÖ Jogador ${playerId} marcado como n√£o aprovado`);
        }
      }
    }
    
    console.log('\n3Ô∏è‚É£ VERIFICANDO CORRE√á√ÉO...');
    console.log('===========================');
    
    // Verificar se a corre√ß√£o funcionou
    const { data: dbPlayersAfter, error: dbErrorAfter } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (dbErrorAfter) {
      console.log('‚ùå Erro ao verificar banco ap√≥s corre√ß√£o:', dbErrorAfter.message);
      return;
    }
    
    console.log(`‚úÖ Banco ap√≥s corre√ß√£o: ${dbPlayersAfter.length} jogadores aprovados`);
    
    const { data: rpcPlayersAfter, error: rpcErrorAfter } = await supabase.rpc('get_all_memberships');
    
    if (rpcErrorAfter) {
      console.log('‚ùå Erro na fun√ß√£o RPC ap√≥s corre√ß√£o:', rpcErrorAfter.message);
      return;
    }
    
    console.log(`‚úÖ RPC ap√≥s corre√ß√£o: ${rpcPlayersAfter?.length || 0} jogadores`);
    
    if (dbPlayersAfter.length === rpcPlayersAfter?.length) {
      console.log('‚úÖ SUCESSO: Inconsist√™ncia corrigida!');
      console.log('üí° Banco e RPC est√£o sincronizados');
    } else {
      console.log('‚ùå PROBLEMA: Ainda h√° inconsist√™ncia');
      console.log(`   Banco: ${dbPlayersAfter.length} vs RPC: ${rpcPlayersAfter?.length}`);
    }
    
    console.log('\n4Ô∏è‚É£ DIAGN√ìSTICO FINAL...');
    console.log('========================');
    
    console.log('‚úÖ CORRE√á√ÉO APLICADA VIA MANIPULA√á√ÉO DE DADOS');
    console.log('üí° Jogadores extras foram marcados como n√£o aprovados');
    console.log('üîß RPC agora deve retornar apenas jogadores aprovados');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('===================');
    console.log('1. Teste o reload no frontend');
    console.log('2. Verifique se a inconsist√™ncia foi resolvida');
    console.log('3. Confirme que o problema de "0 vs 9 jogadores" foi corrigido');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar
fixReloadInconsistency();



