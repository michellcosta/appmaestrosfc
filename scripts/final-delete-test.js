/**
 * Script de Teste Final do Delete
 * Testa se o problema foi completamente resolvido
 */

import { createClient } from '@supabase/supabase-js';

console.log('üéØ TESTE FINAL DO DELETE...\n');

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://autxxmhtadimwvprfsov.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF1dHh4bWh0YWRpbXd2cHJmc292Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY2MDQ1NDcsImV4cCI6MjA3MjE4MDU0N30.LwjIbMib_pPKpiXAZ3bu1tSVyTjhDzLPI6E59NdG3Ig';

const supabase = createClient(supabaseUrl, supabaseKey);

async function finalDeleteTest() {
  try {
    console.log('1Ô∏è‚É£ VERIFICANDO ESTADO ATUAL...');
    console.log('==============================');
    
    // Verificar jogadores no banco
    const { data: dbPlayers, error: dbError } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (dbError) {
      console.log('‚ùå Erro ao buscar jogadores no banco:', dbError.message);
      return;
    }
    
    console.log(`‚úÖ Banco de dados: ${dbPlayers.length} jogadores aprovados`);
    
    // Verificar fun√ß√£o RPC
    const { data: rpcPlayers, error: rpcError } = await supabase.rpc('get_all_memberships');
    
    if (rpcError) {
      console.log('‚ùå Erro na fun√ß√£o RPC:', rpcError.message);
      return;
    }
    
    console.log(`‚úÖ Fun√ß√£o RPC: ${rpcPlayers?.length || 0} jogadores`);
    
    // Verificar se h√° diferen√ßa
    if (dbPlayers.length !== rpcPlayers?.length) {
      console.log('‚ö†Ô∏è DIFEREN√áA ENCONTRADA:');
      console.log(`   Banco: ${dbPlayers.length} jogadores`);
      console.log(`   RPC: ${rpcPlayers?.length || 0} jogadores`);
      console.log('üí° Isso pode causar o problema de "jogador volta"');
    } else {
      console.log('‚úÖ Banco e RPC est√£o sincronizados');
    }
    
    console.log('\n2Ô∏è‚É£ TESTANDO DELETE FINAL...');
    console.log('============================');
    
    if (dbPlayers.length === 0) {
      console.log('‚ö†Ô∏è Nenhum jogador para testar');
      return;
    }
    
    // Pegar um jogador para teste
    const testPlayer = dbPlayers[0];
    console.log(`üîç Testando delete de: ${testPlayer.name}`);
    
    // Deletar o jogador
    const { data: deleteResult, error: deleteError } = await supabase
      .from('player_profiles')
      .delete()
      .eq('user_id', testPlayer.user_id)
      .select('*');
    
    if (deleteError) {
      console.log('‚ùå Erro no delete:', deleteError.message);
      return;
    }
    
    console.log('‚úÖ Delete executado com sucesso!');
    
    console.log('\n3Ô∏è‚É£ VERIFICANDO RESULTADO...');
    console.log('============================');
    
    // Verificar banco ap√≥s delete
    const { data: dbPlayersAfter, error: dbErrorAfter } = await supabase
      .from('player_profiles')
      .select('*')
      .eq('approved', true);
    
    if (dbErrorAfter) {
      console.log('‚ùå Erro ao verificar banco ap√≥s delete:', dbErrorAfter.message);
      return;
    }
    
    console.log(`‚úÖ Banco ap√≥s delete: ${dbPlayersAfter.length} jogadores`);
    
    // Verificar RPC ap√≥s delete
    const { data: rpcPlayersAfter, error: rpcErrorAfter } = await supabase.rpc('get_all_memberships');
    
    if (rpcErrorAfter) {
      console.log('‚ùå Erro na fun√ß√£o RPC ap√≥s delete:', rpcErrorAfter.message);
      return;
    }
    
    console.log(`‚úÖ RPC ap√≥s delete: ${rpcPlayersAfter?.length || 0} jogadores`);
    
    // Verificar se o jogador foi removido
    const playerInDb = dbPlayersAfter.some(p => p.user_id === testPlayer.user_id);
    const playerInRpc = rpcPlayersAfter?.some(p => p.id === testPlayer.user_id);
    
    console.log('\n4Ô∏è‚É£ DIAGN√ìSTICO FINAL...');
    console.log('========================');
    
    if (playerInDb) {
      console.log('‚ùå PROBLEMA: Jogador ainda existe no banco!');
      console.log('üí° CAUSA: Delete n√£o foi executado corretamente');
    } else if (playerInRpc) {
      console.log('‚ùå PROBLEMA: Jogador ainda aparece na fun√ß√£o RPC!');
      console.log('üí° CAUSA: Fun√ß√£o RPC n√£o est√° filtrando corretamente');
    } else {
      console.log('‚úÖ SUCESSO: Jogador foi removido completamente!');
      console.log('üí° DELETE FUNCIONANDO PERFEITAMENTE!');
    }
    
    console.log('\nüîß RESUMO DAS CORRE√á√ïES:');
    console.log('========================');
    console.log('‚úÖ Frontend corrigido para evitar m√∫ltiplos reloads');
    console.log('‚úÖ Cache local implementado');
    console.log('‚úÖ Filtro de dados duplicados adicionado');
    console.log('‚úÖ L√≥gica de delete corrigida');
    
    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('===================');
    console.log('1. Teste o delete no frontend');
    console.log('2. Verifique se o jogador n√£o volta ap√≥s reload');
    console.log('3. Verifique se n√£o h√° m√∫ltiplos reloads no console');
    console.log('4. Se o problema persistir, verifique o console do navegador');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

// Executar teste
finalDeleteTest();



