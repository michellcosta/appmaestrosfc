/**
 * Sistema de Prote√ß√£o do Owner Principal
 * Garante que apenas o owner principal possa criar novos owners e n√£o possa ser exclu√≠do
 */

// ID do owner principal - ser√° definido automaticamente no primeiro login
let MAIN_OWNER_ID: string | null = null;

/**
 * Define o ID do owner principal
 * Deve ser chamado apenas uma vez, no primeiro login
 */
export function setMainOwnerId(userId: string): void {
  if (!MAIN_OWNER_ID) {
    MAIN_OWNER_ID = userId;
    localStorage.setItem('main_owner_id', userId);
    console.log('üîí Owner principal definido:', userId);
  }
}

/**
 * Obt√©m o ID do owner principal
 */
export function getMainOwnerId(): string | null {
  if (!MAIN_OWNER_ID) {
    MAIN_OWNER_ID = localStorage.getItem('main_owner_id');
  }
  return MAIN_OWNER_ID;
}

/**
 * Verifica se o usu√°rio atual √© o owner principal
 */
export function isMainOwner(userId: string | undefined): boolean {
  if (!userId) return false;
  const mainOwnerId = getMainOwnerId();
  return mainOwnerId === userId;
}

/**
 * Verifica se √© permitido criar novos owners
 * Apenas o owner principal pode criar novos owners
 */
export function canCreateOwner(currentUserId: string | undefined): boolean {
  // Verificar se j√° existe um owner principal
  const mainOwnerId = getMainOwnerId();
  
  // Se n√£o h√° owner principal definido, permite criar
  if (!mainOwnerId) {
    return true;
  }
  
  // Apenas o owner principal pode criar novos owners
  return isMainOwner(currentUserId);
}

/**
 * Verifica se √© permitido excluir um usu√°rio
 * O owner principal n√£o pode ser exclu√≠do
 */
export function canDeleteUser(targetUserId: string, currentUserId: string | undefined): boolean {
  const mainOwnerId = getMainOwnerId();
  
  // N√£o pode excluir o owner principal
  if (targetUserId === mainOwnerId) {
    return false;
  }
  
  // Apenas o owner principal pode excluir outros usu√°rios
  return isMainOwner(currentUserId);
}

/**
 * Inicializa o sistema de prote√ß√£o
 * Deve ser chamado no in√≠cio da aplica√ß√£o
 */
export function initializeOwnerProtection(currentUser: any): void {
  if (currentUser?.role === 'owner' && currentUser?.id) {
    // Se n√£o h√° owner principal definido, define o usu√°rio atual
    if (!getMainOwnerId()) {
      setMainOwnerId(currentUser.id);
    }
  }
}

/**
 * Mensagens de erro para prote√ß√µes
 */
export const PROTECTION_MESSAGES = {
  CANNOT_CREATE_OWNER: 'üö´ Apenas o owner principal pode criar novos owners.',
  CANNOT_DELETE_MAIN_OWNER: 'üö´ O owner principal n√£o pode ser exclu√≠do.',
  ONLY_MAIN_OWNER_CAN_DELETE: 'üö´ Apenas o owner principal pode excluir usu√°rios.',
  ACCESS_DENIED: 'üö´ Acesso negado. Voc√™ n√£o tem permiss√£o para esta a√ß√£o.',
  CANNOT_LOGOUT_MAIN_OWNER: 'üö´ O owner principal n√£o pode fazer logout.'
};